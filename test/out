/* ************************************************************************** */$
/*                                                                            */$
/*                                                        :::      ::::::::   */$
/*   main.c                                             :+:      :+:    :+:   */$
/*                                                    +:+ +:+         +:+     */$
/*   By: moouahab <mohamed.ouahab1999@gmail.com>    +#+  +:+       +#+        */$
/*                                                +#+#+#+#+#+   +#+           */$
/*   Created: 2024/01/28 14:52:28 by moouahab          #+#    #+#             */$
/*   Updated: 2024/01/28 18:06:33 by moouahab         ###   ########.fr       */$
/*                                                                            */$
/* ************************************************************************** */$
$
#include "test.h"$
$
$
$
/**$
 * [GESTIONS DES MULTIPIPE]$
 * $
 * Etape 1: Creeation du reseau intre-process$
 * $
 * pour cree plusieur pipe nous  utilisons  $
 * une boucle qui itere sur la creation d'un pipe$
 * dans un tableau 'pfd'.$
 * chaque 'pfd[i]' represente  un tube avec deux descripteur de fichier:$
 * - pfd[i][0] pour la lecture depui le pipe $
 * - pfd[i][1] pour l'ecriture dans le pipe  $
 * $
 * $
 * $
*/$
$
int main(int argc, char const *argv[])$
{$
    int pfd[NUM_CHILDREN - 1][2]; // Tableau pour stocker les descripteurs de fichiers des tubes$
    int pid;$
    int p;$
    int e;$
    int c;$
    /**$
     * Etape 1: CrM-CM-)ation du rM-CM-)seau inter-processus$
     * $
     * Pour crM-CM-)er plusieurs tubes (pipes), nous utilisons $
     * une boucle qui itM-CM-(re sur la crM-CM-)ation d'un tube$
     * dans le tableau 'pfd'.$
     * Chaque 'pfd[i]' reprM-CM-)sente un tube avec deux descripteurs de fichier :$
     * - pfd[i][0] pour la lecture depuis le tube.$
     * - pfd[i][1] pour l'M-CM-)criture dans le tube.$
     * $
     * Nous utilisons un tableau de tubes (pipes)$
     * pour M-CM-)tablir des connexions entre$
     * les processus enfants. Comme chaque enfant$
     * communique avec ses voisins, nous$
     * aurons besoin de (NUM_CHILDREN - 1) tubes.$
     */$
    p = 0;$
    e = 0;$
    c = 0;$
    while (p < NUM_CHILDREN - 1)$
    {$
        if (pipe(pfd[p]) == -1)$
        {$
            perror("pipe");$
            return (1);$
        }$
        p++;$
    }$
    $
    /**$
     * Partie 2 : Creation d'enfant multiple $
     * $
     * pour cree plusieur enfant a la suite on fait une boucle$
     * de tant qu'on arrive pas on nombre voulu d'enfant $
     * on les cree $
     * $
     * Si pas le premier enfant nous fermeront le fd de lecture $
     * est nous redirgeront entre santadar dans le fd ecriture $
     * $
     * une fois arriver au dernier enfant nous pouvon cloes le fd $
     * de lecture et redirger vers lentre standart$
     * $
     * chaque enfant aura ca comment a excuter $
     * */$
    $
    $
    while (e < NUM_CHILDREN)$
    {$
        pid = fork();$
        if (pid < 0)$
        {$
            perror("pipe");$
            return (2);$
        }$
        else if (pid == 0)$
        {$
            if (e > 0)$
            {$
                close(pfd[e - 1][1]);$
                dup2(pfd[e - 1][0], STDIN_FILENO);$
            }$
            if (e < NUM_CHILDREN - 1)$
            {$
                close(pfd[e][0]);$
                dup2(pfd[e][1], STDOUT_FILENO);   $
            }$
            // execve(/bin, <tableau de cmd>, <env>);$
            $
        }$
        e++;$
    }$
    $
    return 0;$
}$
$
